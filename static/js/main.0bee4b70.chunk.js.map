{"version":3,"sources":["index.js"],"names":["Square","props","className","highlight","value","onClick","Dot","Board","i","highlights","this","key","squares","indexOf","grid","Array","height","r","row","width","c","renderSquare","React","Component","Game","state","history","fill","position","ascending","stepNumber","blueIsNext","slice","length","calculateWinner","index","bottom","calculateLowestOpenColumnPosition","setState","concat","step","status","line","map","h","move","current","winner","moves","reverse","col","Math","floor","calculateRow","desc","jumpTo","team","toUpperCase","filter","s","toggleAscending","handleClick","checkDir","getNext","push","next","neighbors","j","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0bee4b70.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n\nfunction Square(props) {\n    return (\n        <button\n            className={`square ${props.highlight ? props.value : ''}`}\n            onClick={props.onClick}\n        >\n            <Dot value={props.value} />\n        </button>\n    );\n}\n\nfunction Dot(props) {\n    return (\n        <span className={`dot ${props.value ? props.value : ''}`}></span>\n    );\n}\n\nclass Board extends React.Component {\n    renderSquare(i) {\n        const highlights = this.props.highlights || [];\n        return <Square key={`square-${i}`}\n            value={this.props.squares[i]}\n            highlight={highlights.indexOf(i) > -1}\n            onClick={() => this.props.onClick(i)}\n        />;\n    }\n\n    render() {\n        const grid = Array(height);\n        for (let r = 0, i = 0; r < height; r++) {\n            const row = Array(width);\n            for (let c = 0; c < width; c++ , i++) {\n                row[c] = this.renderSquare(i);\n            }\n            grid[r] =\n                <div className=\"board-row\" key={`row-${r}`}>\n                    {row}\n                </div>;\n        }\n        return (\n            <div>\n                {grid}\n            </div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            history: [{\n                squares: Array(width * height).fill(null),\n                position: null\n            }],\n            ascending: true,\n            stepNumber: 0,\n            blueIsNext: true,\n        };\n    }\n\n    handleClick(i) {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n\n        // don't allow a move if game is already won\n        if (calculateWinner(squares)) {\n            return;\n        }\n\n        const index = calculateLowestOpenColumnPosition(squares, i);\n        // don't allow move if column already full\n        if (index === null) {\n            return;\n        }\n\n        squares[index] = this.state.blueIsNext ? 'blue' : 'red';\n\n        this.setState({\n            history: history.concat([{\n                squares: squares,\n                position: index\n            }]),\n            stepNumber: history.length,\n            blueIsNext: !this.state.blueIsNext\n        });\n    }\n\n    jumpTo(step) {\n        this.setState({\n            stepNumber: step,\n            blueIsNext: (step % 2) === 0\n        })\n    }\n\n    toggleAscending() {\n        this.setState({\n            ascending: !this.state.ascending\n        })\n    }\n\n    render() {\n        // map the history to include the index; \n        // my rationale for doing it this way is: the index is redundant info\n        // to be stored in the model, and it is only needed for rendering\n        // the data model implicitly has order and index in the array\n        const history = this.state.history.map((h, i) => {\n            return { ...h, move: i };\n        });\n        const current = history[this.state.stepNumber];\n        const winner = calculateWinner(current.squares);\n\n        const moves = (this.state.ascending ? history : history.reverse())\n            .map((step) => {\n                const move = step.move;\n                const col = calculateCol(step.position);\n                const row = calculateRow(step.position);\n                const value = move % 2 === 1 ? 'blue' : 'red';\n                const desc = move ?\n                    'Go to move #' + move + ' ' + value + '@( ' + col + ', ' + row + ' )' :\n                    'Go to game start';\n                return (\n                    <li key={move}>\n                        <button\n                            className={move === this.state.stepNumber ? 'currentStep' : ''}\n                            onClick={() => this.jumpTo(move)}\n                        >\n                            {desc}\n                        </button>\n                    </li>\n                )\n            });\n\n        let status;\n        let line;\n        if (winner) {\n            status = 'Winner: ' + winner.team.toUpperCase();\n            line = winner.line;\n        } else if (current.squares.filter(s => s === null).length === 0) {\n            status = 'Draw!';\n        } else {\n            status = 'Next player: ' + (this.state.blueIsNext ? 'Blue' : 'Red');\n        }\n\n        // button to toggle whether history is ascending/descending\n        const ascending =\n            <button\n                onClick={() => this.toggleAscending()}\n            >\n                {this.state.ascending ? 'Ascending' : 'Descending'}\n            </button>;\n\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board\n                        squares={current.squares}\n                        highlights={line}\n                        onClick={(i) => this.handleClick(i)} />\n                </div>\n                <div className=\"game-info\">\n                    <div>{status}</div>\n                    <div>{ascending}</div>\n                    <div>{moves}</div>\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction calculateCol(i) {\n    return i % width;\n}\n\nfunction calculateRow(i) {\n    return Math.floor(i / width);\n}\n\nconst width = 7;\nconst height = 6;\n\nfunction checkDir(squares, i, getNext, history) {\n    history = history || [];\n    if (squares[i] === null) return history;\n    history.push(i);\n    var next = getNext(i);\n    if (squares[next] === squares[i]) {\n        checkDir(squares, next, getNext, history)\n    }\n    return history;\n}\n\nfunction getNeighborUp(i) {\n    const next = i - width;\n    if (next < 0) {\n        return null;\n    }\n    return next;\n}\n\nfunction getNeighborDown(i) {\n    const next = i + width;\n    if (next >= width * height) {\n        return null;\n    }\n    return next;\n}\n\n\nfunction getNeighborUpRight(i) {\n    const next = i - width + 1;\n    if (next < 0) {\n        return null;\n    }\n    if (next % width === 0) {\n        return null;\n    }\n    return next;\n}\n\nfunction getNeighborRight(i) {\n    const next = (i + 1)\n    if (next % width === 0) {\n        return null;\n    }\n    return next;\n}\n\nfunction getNeighborDownRight(i) {\n    const next = i + width + 1;\n    if (next >= height * width) {\n        return null;\n    }\n    if (next % width === 0) {\n        return null;\n    }\n    return next;\n}\n\nconst neighbors = [getNeighborUp,\n    getNeighborUpRight,\n    getNeighborRight,\n    getNeighborDownRight];\n\nfunction calculateWinner(squares) {\n\n    for (let i = 0; i < squares.length; i++) {\n        for (let j = 0; j < neighbors.length; j++) {\n            const neighborFunc = neighbors[j];\n            const line = checkDir(squares, i, neighborFunc);\n            if (line.length >= 4) {\n                return {\n                    line: line,\n                    team: squares[line[0]]\n                };\n            }\n        }\n    }\n\n    return null;\n}\n\nfunction calculateLowestOpenColumnPosition(squares, i) {\n    let bottom = (width * (height - 1)) + i % width;\n    for (; bottom >= 0; bottom -= width) {\n        if (squares[bottom] === null) {\n            return bottom;\n        }\n    }\n\n    return null;\n}\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n)"],"sourceRoot":""}